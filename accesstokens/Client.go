package accesstokens


import(
	"errors"
	"encoding/json"
	"github.com/cohesity/management-sdk-go/models"
	"github.com/cohesity/management-sdk-go/unirest-go"
	"github.com/cohesity/management-sdk-go/apihelper"
	"github.com/cohesity/management-sdk-go/configuration"
)
/*
 * Client structure as interface implementation
 */
type ACCESSTOKENS_IMPL struct {
     config configuration.CONFIGURATION
}

/**
 * Before making other REST API requests, your REST client must make a
 * 'POST /public/accessToken' request with a valid Cohesity username and
 * password. This POST request returns an access token and type
 * in the response that is generated by the Cohesity Cluster.
 * Subsequent requests to other Cohesity REST API operations must
 * specify the returned access token and type by setting 'Authorization'
 * in the http header in the following format:
 * Authorization: token_type access_token
 * The generated token is valid for 24 hours. If a request is made with
 * an expired token, the 'Token expired' error message is returned.
 * Add code to your REST client to check for this error and request
 * another access token before reissuing the request.
 * @param    *models.CreateAccessTokenCredentialRequest        body     parameter: Required
 * @return	Returns the *models.AccessToken response from the API call
 */
func (me *ACCESSTOKENS_IMPL) CreateGenerateAccessToken (
            body *models.CreateAccessTokenCredentialRequest) (*models.AccessToken, error) {
//validating required parameters
    if (body == nil){
        return nil,errors.New("The parameter 'body' is a required parameter and cannot be nil.")
}     //the endpoint path uri
    _pathUrl := "/public/accessTokens"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration.GetBaseURI(configuration.DEFAULT_HOST,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "cohesity-Go-sdk-6.2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,me.config.SkipSSL());
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 0) {
        err = apihelper.NewAPIError("Error", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models.AccessToken = &models.AccessToken{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

